/// <reference types="node" />
import ts from 'typescript';
export declare const defaultCompilerOptions: ts.CompilerOptions;
export declare type NodeExtension = (module: NodeModule, filePath: string) => unknown;
export interface ICreateNodeExtensionOptions {
    /**
     * Directory to start searching for `tsconfig.json` and cache directory.
     *
     * @default process.cwd()
     */
    contextPath?: string;
    /**
     * Absolute path of an existing directory to use for persistent cache.
     *
     * @default finds the top-most `package.json`, and uses `./node_modules/.config` next to it.
     */
    cacheDirectoryPath?: string;
    /**
     * Install `source-map-support` connected to the cache.
     *
     * @default true (if `--enable-source-maps` was not passed to node)
     */
    installSourceMapSupport?: boolean;
    /**
     * Search for the closest `configFileName` file to `contextPath`, and load it.
     *
     * @default true
     */
    configLookup?: boolean;
    /**
     * Path to `tsconfig.json` file.
     * Specifying it will skip config lookup.
     */
    configFilePath?: string;
    /**
     * Name of config file to search for when looking up config.
     *
     * @default 'tsconfig.json'
     */
    configFileName?: string;
    /**
     * Compiler options to use when config file (e.g. `tsconfig.json`) isn't found.
     *
     * @default `defaultCompilerOptions` (also exported from package)
     */
    compilerOptions?: ts.CompilerOptions;
    /**
     * Automatically pick target syntax matching running Node version.
     *
     * @default true
     */
    autoScriptTarget?: boolean;
}
/**
 * Creates a cachine TypeScript node extension.
 */
export declare function createNodeExtension({ contextPath, configLookup, configFileName, configFilePath, compilerOptions: noConfigOptions, cacheDirectoryPath, installSourceMapSupport, autoScriptTarget, }?: ICreateNodeExtensionOptions): NodeExtension;
export declare type TransformFn = (filePath: string) => string;
export declare function createTransformerExtension(transform: TransformFn): NodeExtension;
//# sourceMappingURL=node-extension.d.ts.map