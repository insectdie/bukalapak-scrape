"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findAllUp = exports.ensureDirectorySync = exports.getCanonicalPath = void 0;
const typescript_1 = __importDefault(require("typescript"));
const fs_1 = require("fs");
const path_1 = require("path");
const { sys } = typescript_1.default;
exports.getCanonicalPath = sys.useCaseSensitiveFileNames
    ? (v) => v
    : (v) => v.toLowerCase();
function ensureDirectorySync(directoryPath) {
    if (fs_1.existsSync(directoryPath)) {
        return;
    }
    try {
        fs_1.mkdirSync(directoryPath);
    }
    catch (e) {
        const parentPath = path_1.dirname(directoryPath);
        if (parentPath === directoryPath) {
            throw e;
        }
        ensureDirectorySync(parentPath);
        fs_1.mkdirSync(directoryPath);
    }
}
exports.ensureDirectorySync = ensureDirectorySync;
function findAllUp(initialDirectoryPath, fileName) {
    const filePaths = [];
    let currentPath = path_1.resolve(initialDirectoryPath);
    let lastPath;
    while (currentPath !== lastPath) {
        const filePath = path_1.join(currentPath, fileName);
        if (fs_1.existsSync(filePath) && fs_1.statSync(filePath).isFile()) {
            filePaths.push(filePath);
        }
        lastPath = currentPath;
        currentPath = path_1.dirname(currentPath);
    }
    return filePaths;
}
exports.findAllUp = findAllUp;
//# sourceMappingURL=fs.js.map