"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEmitModuleKind = exports.getEmitScriptTarget = exports.getNewLine = exports.readAndParseConfigFile = exports.filterAffectsEmit = exports.areEmitCompatible = exports.affectsEmit = void 0;
const path_1 = require("path");
const typescript_1 = __importDefault(require("typescript"));
const { ScriptTarget, ModuleKind, readJsonConfigFile, parseJsonSourceFileConfigFileContent, sys } = typescript_1.default;
const { readFile, newLine } = sys;
exports.affectsEmit = new Set([
    // scoping cache path with these two
    // 'target',
    // 'module',
    'jsx',
    'sourceMap',
    'removeComments',
    'importHelpers',
    'downlevelIteration',
    'esModuleInterop',
    'inlineSourceMap',
    'inlineSources',
    'reactNamespace',
    'emitBOM',
    'newLine',
    'stripInternal',
    'noEmitHelpers',
    'preserveConstEnums',
]);
function areEmitCompatible(oldOptions, options) {
    for (const optionName of exports.affectsEmit) {
        const newOptionValue = options[optionName];
        const oldOptionValue = oldOptions[optionName];
        if (!!newOptionValue === !!oldOptionValue) {
            continue;
        }
        if (newOptionValue !== oldOptionValue) {
            return false;
        }
    }
    return true;
}
exports.areEmitCompatible = areEmitCompatible;
function filterAffectsEmit(compilerOptions) {
    const filteredOptions = {};
    for (const [optionName, optionValue] of Object.entries(compilerOptions)) {
        if (exports.affectsEmit.has(optionName)) {
            filteredOptions[optionName] = optionValue;
        }
    }
    return filteredOptions;
}
exports.filterAffectsEmit = filterAffectsEmit;
function readAndParseConfigFile(filePath) {
    const jsonSourceFile = readJsonConfigFile(filePath, readFile);
    return parseJsonSourceFileConfigFileContent(jsonSourceFile, sys, path_1.dirname(filePath));
}
exports.readAndParseConfigFile = readAndParseConfigFile;
function getNewLine() {
    return newLine;
}
exports.getNewLine = getNewLine;
function getEmitScriptTarget(compilerOptions) {
    return compilerOptions.target || ScriptTarget.ES3;
}
exports.getEmitScriptTarget = getEmitScriptTarget;
function getEmitModuleKind(compilerOptions) {
    return typeof compilerOptions.module === 'number'
        ? compilerOptions.module
        : getEmitScriptTarget(compilerOptions) >= ScriptTarget.ES2015
            ? ModuleKind.ES2015
            : ModuleKind.CommonJS;
}
exports.getEmitModuleKind = getEmitModuleKind;
//# sourceMappingURL=typescript.js.map