"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCachedFn = exports.calcSha1 = exports.compilerOptionsToCacheName = exports.findCacheDirectory = exports.filePathToCacheFileName = void 0;
const crypto_1 = require("crypto");
const typescript_1 = __importDefault(require("typescript"));
const path_1 = require("path");
const fs_1 = require("./fs");
const typescript_2 = require("./typescript");
const filePathToCacheFileName = (filePath) => `${calcSha1(fs_1.getCanonicalPath(filePath))}.json`;
exports.filePathToCacheFileName = filePathToCacheFileName;
function findCacheDirectory(workDirPath) {
    const packageJsonPaths = fs_1.findAllUp(workDirPath, 'package.json');
    const rootPackageJson = packageJsonPaths[packageJsonPaths.length - 1];
    return rootPackageJson ? path_1.join(path_1.dirname(rootPackageJson), 'node_modules', '.cache') : undefined;
}
exports.findCacheDirectory = findCacheDirectory;
function compilerOptionsToCacheName(compilerOptions) {
    const moduleKind = typescript_1.default.ModuleKind[typescript_2.getEmitModuleKind(compilerOptions)];
    const scriptTarget = typescript_1.default.ScriptTarget[typescript_2.getEmitScriptTarget(compilerOptions)];
    return `ts-${moduleKind.toLowerCase()}-${scriptTarget.toLowerCase()}`;
}
exports.compilerOptionsToCacheName = compilerOptionsToCacheName;
function calcSha1(data) {
    return crypto_1.createHash('sha1').update(data).digest('hex');
}
exports.calcSha1 = calcSha1;
// eslint-disable-next-line
function createCachedFn(fn, argsToCacheKey) {
    const cache = new Map();
    const cachedFn = (...args) => {
        const cacheKey = argsToCacheKey(...args);
        if (cache.has(cacheKey)) {
            return cache.get(cacheKey);
        }
        const item = fn(...args);
        cache.set(cacheKey, item);
        return item;
    };
    return [cachedFn, cache];
}
exports.createCachedFn = createCachedFn;
//# sourceMappingURL=cache.js.map