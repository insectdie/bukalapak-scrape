"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readCacheFileSync = exports.writeCacheFileSync = exports.transpileCached = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const typescript_1 = __importDefault(require("typescript"));
const helpers_1 = require("./helpers");
const tsVersion = typescript_1.default.version;
function transpileCached(options) {
    const { fileName: filePath, cacheDirectoryPath, fileContents, compilerOptions = {} } = options;
    const mtime = fs_1.statSync(filePath).mtime.getTime();
    const cacheFilePath = path_1.join(cacheDirectoryPath, helpers_1.filePathToCacheFileName(filePath));
    const cachedOutput = readCacheFileSync(cacheFilePath);
    if (cachedOutput &&
        cachedOutput.mtime === mtime &&
        cachedOutput.tsVersion === tsVersion &&
        helpers_1.areEmitCompatible(cachedOutput, compilerOptions)) {
        return cachedOutput;
    }
    const transpiledOutput = typescript_1.default.transpileModule(typeof fileContents === 'string' ? fileContents : fs_1.readFileSync(filePath, 'utf8'), options);
    writeCacheFileSync(cacheFilePath, {
        filePath,
        mtime,
        tsVersion,
        outputText: transpiledOutput.outputText,
        sourceMapText: transpiledOutput.sourceMapText,
        ...helpers_1.filterAffectsEmit(compilerOptions),
    });
    return transpiledOutput;
}
exports.transpileCached = transpileCached;
function writeCacheFileSync(cacheFilePath, output) {
    try {
        fs_1.writeFileSync(cacheFilePath, JSON.stringify(output, null, 2));
    }
    catch {
        /**/
    }
}
exports.writeCacheFileSync = writeCacheFileSync;
function readCacheFileSync(cacheFilePath) {
    if (fs_1.existsSync(cacheFilePath)) {
        try {
            const cachedOutput = JSON.parse(fs_1.readFileSync(cacheFilePath, 'utf8'));
            if (typeof cachedOutput === 'object' && cachedOutput !== null) {
                return cachedOutput;
            }
        }
        catch {
            /**/
        }
    }
    return undefined;
}
exports.readCacheFileSync = readCacheFileSync;
//# sourceMappingURL=transpile-cached.js.map